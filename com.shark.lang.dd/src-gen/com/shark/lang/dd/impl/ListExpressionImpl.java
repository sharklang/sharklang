/**
 * generated by Xtext 2.23.0
 */
package com.shark.lang.dd.impl;

import com.shark.lang.dd.DdPackage;
import com.shark.lang.dd.ListExpression;
import com.shark.lang.dd.ListExpressionElt;
import com.shark.lang.dd.SharkExpression;

import java.lang.Boolean;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>List Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.shark.lang.dd.impl.ListExpressionImpl#getOp <em>Op</em>}</li>
 *   <li>{@link com.shark.lang.dd.impl.ListExpressionImpl#getLeft <em>Left</em>}</li>
 *   <li>{@link com.shark.lang.dd.impl.ListExpressionImpl#getListElts <em>List Elts</em>}</li>
 *   <li>{@link com.shark.lang.dd.impl.ListExpressionImpl#isNumType <em>Num Type</em>}</li>
 *   <li>{@link com.shark.lang.dd.impl.ListExpressionImpl#isStrType <em>Str Type</em>}</li>
 *   <li>{@link com.shark.lang.dd.impl.ListExpressionImpl#isDateType <em>Date Type</em>}</li>
 *   <li>{@link com.shark.lang.dd.impl.ListExpressionImpl#isBoolType <em>Bool Type</em>}</li>
 *   <li>{@link com.shark.lang.dd.impl.ListExpressionImpl#getRange <em>Range</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ListExpressionImpl extends SharkExpressionImpl implements ListExpression
{
  /**
   * The default value of the '{@link #getOp() <em>Op</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOp()
   * @generated
   * @ordered
   */
  protected static final String OP_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getOp() <em>Op</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOp()
   * @generated
   * @ordered
   */
  protected String op = OP_EDEFAULT;

  /**
   * The cached value of the '{@link #getLeft() <em>Left</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLeft()
   * @generated
   * @ordered
   */
  protected SharkExpression left;

  /**
   * The cached value of the '{@link #getListElts() <em>List Elts</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getListElts()
   * @generated
   * @ordered
   */
  protected EList<ListExpressionElt> listElts;

  /**
   * The default value of the '{@link #isNumType() <em>Num Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isNumType()
   * @generated
   * @ordered
   */
  protected static final boolean NUM_TYPE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isNumType() <em>Num Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isNumType()
   * @generated
   * @ordered
   */
  protected boolean numType = NUM_TYPE_EDEFAULT;

  /**
   * The default value of the '{@link #isStrType() <em>Str Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isStrType()
   * @generated
   * @ordered
   */
  protected static final boolean STR_TYPE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isStrType() <em>Str Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isStrType()
   * @generated
   * @ordered
   */
  protected boolean strType = STR_TYPE_EDEFAULT;

  /**
   * The default value of the '{@link #isDateType() <em>Date Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isDateType()
   * @generated
   * @ordered
   */
  protected static final boolean DATE_TYPE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isDateType() <em>Date Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isDateType()
   * @generated
   * @ordered
   */
  protected boolean dateType = DATE_TYPE_EDEFAULT;

  /**
   * The default value of the '{@link #isBoolType() <em>Bool Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isBoolType()
   * @generated
   * @ordered
   */
  protected static final boolean BOOL_TYPE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isBoolType() <em>Bool Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isBoolType()
   * @generated
   * @ordered
   */
  protected boolean boolType = BOOL_TYPE_EDEFAULT;

  /**
   * The default value of the '{@link #getRange() <em>Range</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRange()
   * @generated
   * @ordered
   */
  protected static final String RANGE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getRange() <em>Range</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRange()
   * @generated
   * @ordered
   */
  protected String range = RANGE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ListExpressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DdPackage.Literals.LIST_EXPRESSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getOp()
  {
    return op;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOp(String newOp)
  {
    String oldOp = op;
    op = newOp;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DdPackage.LIST_EXPRESSION__OP, oldOp, op));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SharkExpression getLeft()
  {
    return left;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLeft(SharkExpression newLeft, NotificationChain msgs)
  {
    SharkExpression oldLeft = left;
    left = newLeft;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DdPackage.LIST_EXPRESSION__LEFT, oldLeft, newLeft);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLeft(SharkExpression newLeft)
  {
    if (newLeft != left)
    {
      NotificationChain msgs = null;
      if (left != null)
        msgs = ((InternalEObject)left).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DdPackage.LIST_EXPRESSION__LEFT, null, msgs);
      if (newLeft != null)
        msgs = ((InternalEObject)newLeft).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DdPackage.LIST_EXPRESSION__LEFT, null, msgs);
      msgs = basicSetLeft(newLeft, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DdPackage.LIST_EXPRESSION__LEFT, newLeft, newLeft));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ListExpressionElt> getListElts()
  {
    if (listElts == null)
    {
      listElts = new EObjectContainmentEList<ListExpressionElt>(ListExpressionElt.class, this, DdPackage.LIST_EXPRESSION__LIST_ELTS);
    }
    return listElts;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isNumType()
  {
    return numType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNumType(boolean newNumType)
  {
    boolean oldNumType = numType;
    numType = newNumType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DdPackage.LIST_EXPRESSION__NUM_TYPE, oldNumType, numType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isStrType()
  {
    return strType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setStrType(boolean newStrType)
  {
    boolean oldStrType = strType;
    strType = newStrType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DdPackage.LIST_EXPRESSION__STR_TYPE, oldStrType, strType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isDateType()
  {
    return dateType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDateType(boolean newDateType)
  {
    boolean oldDateType = dateType;
    dateType = newDateType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DdPackage.LIST_EXPRESSION__DATE_TYPE, oldDateType, dateType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isBoolType()
  {
    return boolType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBoolType(boolean newBoolType)
  {
    boolean oldBoolType = boolType;
    boolType = newBoolType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DdPackage.LIST_EXPRESSION__BOOL_TYPE, oldBoolType, boolType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getRange()
  {
    return range;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRange(String newRange)
  {
    String oldRange = range;
    range = newRange;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DdPackage.LIST_EXPRESSION__RANGE, oldRange, range));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DdPackage.LIST_EXPRESSION__LEFT:
        return basicSetLeft(null, msgs);
      case DdPackage.LIST_EXPRESSION__LIST_ELTS:
        return ((InternalEList<?>)getListElts()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DdPackage.LIST_EXPRESSION__OP:
        return getOp();
      case DdPackage.LIST_EXPRESSION__LEFT:
        return getLeft();
      case DdPackage.LIST_EXPRESSION__LIST_ELTS:
        return getListElts();
      case DdPackage.LIST_EXPRESSION__NUM_TYPE:
        return isNumType();
      case DdPackage.LIST_EXPRESSION__STR_TYPE:
        return isStrType();
      case DdPackage.LIST_EXPRESSION__DATE_TYPE:
        return isDateType();
      case DdPackage.LIST_EXPRESSION__BOOL_TYPE:
        return isBoolType();
      case DdPackage.LIST_EXPRESSION__RANGE:
        return getRange();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DdPackage.LIST_EXPRESSION__OP:
        setOp((String)newValue);
        return;
      case DdPackage.LIST_EXPRESSION__LEFT:
        setLeft((SharkExpression)newValue);
        return;
      case DdPackage.LIST_EXPRESSION__LIST_ELTS:
        getListElts().clear();
        getListElts().addAll((Collection<? extends ListExpressionElt>)newValue);
        return;
      case DdPackage.LIST_EXPRESSION__NUM_TYPE:
        setNumType((Boolean)newValue);
        return;
      case DdPackage.LIST_EXPRESSION__STR_TYPE:
        setStrType((Boolean)newValue);
        return;
      case DdPackage.LIST_EXPRESSION__DATE_TYPE:
        setDateType((Boolean)newValue);
        return;
      case DdPackage.LIST_EXPRESSION__BOOL_TYPE:
        setBoolType((Boolean)newValue);
        return;
      case DdPackage.LIST_EXPRESSION__RANGE:
        setRange((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DdPackage.LIST_EXPRESSION__OP:
        setOp(OP_EDEFAULT);
        return;
      case DdPackage.LIST_EXPRESSION__LEFT:
        setLeft((SharkExpression)null);
        return;
      case DdPackage.LIST_EXPRESSION__LIST_ELTS:
        getListElts().clear();
        return;
      case DdPackage.LIST_EXPRESSION__NUM_TYPE:
        setNumType(NUM_TYPE_EDEFAULT);
        return;
      case DdPackage.LIST_EXPRESSION__STR_TYPE:
        setStrType(STR_TYPE_EDEFAULT);
        return;
      case DdPackage.LIST_EXPRESSION__DATE_TYPE:
        setDateType(DATE_TYPE_EDEFAULT);
        return;
      case DdPackage.LIST_EXPRESSION__BOOL_TYPE:
        setBoolType(BOOL_TYPE_EDEFAULT);
        return;
      case DdPackage.LIST_EXPRESSION__RANGE:
        setRange(RANGE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DdPackage.LIST_EXPRESSION__OP:
        return OP_EDEFAULT == null ? op != null : !OP_EDEFAULT.equals(op);
      case DdPackage.LIST_EXPRESSION__LEFT:
        return left != null;
      case DdPackage.LIST_EXPRESSION__LIST_ELTS:
        return listElts != null && !listElts.isEmpty();
      case DdPackage.LIST_EXPRESSION__NUM_TYPE:
        return numType != NUM_TYPE_EDEFAULT;
      case DdPackage.LIST_EXPRESSION__STR_TYPE:
        return strType != STR_TYPE_EDEFAULT;
      case DdPackage.LIST_EXPRESSION__DATE_TYPE:
        return dateType != DATE_TYPE_EDEFAULT;
      case DdPackage.LIST_EXPRESSION__BOOL_TYPE:
        return boolType != BOOL_TYPE_EDEFAULT;
      case DdPackage.LIST_EXPRESSION__RANGE:
        return RANGE_EDEFAULT == null ? range != null : !RANGE_EDEFAULT.equals(range);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (op: ");
    result.append(op);
    result.append(", numType: ");
    result.append(numType);
    result.append(", strType: ");
    result.append(strType);
    result.append(", dateType: ");
    result.append(dateType);
    result.append(", boolType: ");
    result.append(boolType);
    result.append(", range: ");
    result.append(range);
    result.append(')');
    return result.toString();
  }

} //ListExpressionImpl

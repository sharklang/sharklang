/**
 * generated by Xtext 2.23.0
 */
package com.shark.lang.dd.impl;

import com.shark.lang.dd.BinaryExpression;
import com.shark.lang.dd.BinaryOperator;
import com.shark.lang.dd.DdPackage;
import com.shark.lang.dd.SharkExpression;

import java.lang.Boolean;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Binary Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.shark.lang.dd.impl.BinaryExpressionImpl#getLeft <em>Left</em>}</li>
 *   <li>{@link com.shark.lang.dd.impl.BinaryExpressionImpl#getOp <em>Op</em>}</li>
 *   <li>{@link com.shark.lang.dd.impl.BinaryExpressionImpl#getRight <em>Right</em>}</li>
 *   <li>{@link com.shark.lang.dd.impl.BinaryExpressionImpl#isNumType <em>Num Type</em>}</li>
 *   <li>{@link com.shark.lang.dd.impl.BinaryExpressionImpl#isStrType <em>Str Type</em>}</li>
 *   <li>{@link com.shark.lang.dd.impl.BinaryExpressionImpl#isDateType <em>Date Type</em>}</li>
 *   <li>{@link com.shark.lang.dd.impl.BinaryExpressionImpl#isBoolType <em>Bool Type</em>}</li>
 * </ul>
 *
 * @generated
 */
public class BinaryExpressionImpl extends SharkExpressionImpl implements BinaryExpression
{
  /**
   * The cached value of the '{@link #getLeft() <em>Left</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLeft()
   * @generated
   * @ordered
   */
  protected SharkExpression left;

  /**
   * The default value of the '{@link #getOp() <em>Op</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOp()
   * @generated
   * @ordered
   */
  protected static final BinaryOperator OP_EDEFAULT = BinaryOperator.OP_OR;

  /**
   * The cached value of the '{@link #getOp() <em>Op</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOp()
   * @generated
   * @ordered
   */
  protected BinaryOperator op = OP_EDEFAULT;

  /**
   * The cached value of the '{@link #getRight() <em>Right</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRight()
   * @generated
   * @ordered
   */
  protected SharkExpression right;

  /**
   * The default value of the '{@link #isNumType() <em>Num Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isNumType()
   * @generated
   * @ordered
   */
  protected static final boolean NUM_TYPE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isNumType() <em>Num Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isNumType()
   * @generated
   * @ordered
   */
  protected boolean numType = NUM_TYPE_EDEFAULT;

  /**
   * The default value of the '{@link #isStrType() <em>Str Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isStrType()
   * @generated
   * @ordered
   */
  protected static final boolean STR_TYPE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isStrType() <em>Str Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isStrType()
   * @generated
   * @ordered
   */
  protected boolean strType = STR_TYPE_EDEFAULT;

  /**
   * The default value of the '{@link #isDateType() <em>Date Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isDateType()
   * @generated
   * @ordered
   */
  protected static final boolean DATE_TYPE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isDateType() <em>Date Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isDateType()
   * @generated
   * @ordered
   */
  protected boolean dateType = DATE_TYPE_EDEFAULT;

  /**
   * The default value of the '{@link #isBoolType() <em>Bool Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isBoolType()
   * @generated
   * @ordered
   */
  protected static final boolean BOOL_TYPE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isBoolType() <em>Bool Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isBoolType()
   * @generated
   * @ordered
   */
  protected boolean boolType = BOOL_TYPE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BinaryExpressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DdPackage.Literals.BINARY_EXPRESSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SharkExpression getLeft()
  {
    return left;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLeft(SharkExpression newLeft, NotificationChain msgs)
  {
    SharkExpression oldLeft = left;
    left = newLeft;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DdPackage.BINARY_EXPRESSION__LEFT, oldLeft, newLeft);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLeft(SharkExpression newLeft)
  {
    if (newLeft != left)
    {
      NotificationChain msgs = null;
      if (left != null)
        msgs = ((InternalEObject)left).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DdPackage.BINARY_EXPRESSION__LEFT, null, msgs);
      if (newLeft != null)
        msgs = ((InternalEObject)newLeft).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DdPackage.BINARY_EXPRESSION__LEFT, null, msgs);
      msgs = basicSetLeft(newLeft, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DdPackage.BINARY_EXPRESSION__LEFT, newLeft, newLeft));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BinaryOperator getOp()
  {
    return op;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOp(BinaryOperator newOp)
  {
    BinaryOperator oldOp = op;
    op = newOp == null ? OP_EDEFAULT : newOp;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DdPackage.BINARY_EXPRESSION__OP, oldOp, op));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SharkExpression getRight()
  {
    return right;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRight(SharkExpression newRight, NotificationChain msgs)
  {
    SharkExpression oldRight = right;
    right = newRight;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DdPackage.BINARY_EXPRESSION__RIGHT, oldRight, newRight);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRight(SharkExpression newRight)
  {
    if (newRight != right)
    {
      NotificationChain msgs = null;
      if (right != null)
        msgs = ((InternalEObject)right).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DdPackage.BINARY_EXPRESSION__RIGHT, null, msgs);
      if (newRight != null)
        msgs = ((InternalEObject)newRight).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DdPackage.BINARY_EXPRESSION__RIGHT, null, msgs);
      msgs = basicSetRight(newRight, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DdPackage.BINARY_EXPRESSION__RIGHT, newRight, newRight));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isNumType()
  {
    return numType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNumType(boolean newNumType)
  {
    boolean oldNumType = numType;
    numType = newNumType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DdPackage.BINARY_EXPRESSION__NUM_TYPE, oldNumType, numType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isStrType()
  {
    return strType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setStrType(boolean newStrType)
  {
    boolean oldStrType = strType;
    strType = newStrType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DdPackage.BINARY_EXPRESSION__STR_TYPE, oldStrType, strType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isDateType()
  {
    return dateType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDateType(boolean newDateType)
  {
    boolean oldDateType = dateType;
    dateType = newDateType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DdPackage.BINARY_EXPRESSION__DATE_TYPE, oldDateType, dateType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isBoolType()
  {
    return boolType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBoolType(boolean newBoolType)
  {
    boolean oldBoolType = boolType;
    boolType = newBoolType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DdPackage.BINARY_EXPRESSION__BOOL_TYPE, oldBoolType, boolType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DdPackage.BINARY_EXPRESSION__LEFT:
        return basicSetLeft(null, msgs);
      case DdPackage.BINARY_EXPRESSION__RIGHT:
        return basicSetRight(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DdPackage.BINARY_EXPRESSION__LEFT:
        return getLeft();
      case DdPackage.BINARY_EXPRESSION__OP:
        return getOp();
      case DdPackage.BINARY_EXPRESSION__RIGHT:
        return getRight();
      case DdPackage.BINARY_EXPRESSION__NUM_TYPE:
        return isNumType();
      case DdPackage.BINARY_EXPRESSION__STR_TYPE:
        return isStrType();
      case DdPackage.BINARY_EXPRESSION__DATE_TYPE:
        return isDateType();
      case DdPackage.BINARY_EXPRESSION__BOOL_TYPE:
        return isBoolType();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DdPackage.BINARY_EXPRESSION__LEFT:
        setLeft((SharkExpression)newValue);
        return;
      case DdPackage.BINARY_EXPRESSION__OP:
        setOp((BinaryOperator)newValue);
        return;
      case DdPackage.BINARY_EXPRESSION__RIGHT:
        setRight((SharkExpression)newValue);
        return;
      case DdPackage.BINARY_EXPRESSION__NUM_TYPE:
        setNumType((Boolean)newValue);
        return;
      case DdPackage.BINARY_EXPRESSION__STR_TYPE:
        setStrType((Boolean)newValue);
        return;
      case DdPackage.BINARY_EXPRESSION__DATE_TYPE:
        setDateType((Boolean)newValue);
        return;
      case DdPackage.BINARY_EXPRESSION__BOOL_TYPE:
        setBoolType((Boolean)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DdPackage.BINARY_EXPRESSION__LEFT:
        setLeft((SharkExpression)null);
        return;
      case DdPackage.BINARY_EXPRESSION__OP:
        setOp(OP_EDEFAULT);
        return;
      case DdPackage.BINARY_EXPRESSION__RIGHT:
        setRight((SharkExpression)null);
        return;
      case DdPackage.BINARY_EXPRESSION__NUM_TYPE:
        setNumType(NUM_TYPE_EDEFAULT);
        return;
      case DdPackage.BINARY_EXPRESSION__STR_TYPE:
        setStrType(STR_TYPE_EDEFAULT);
        return;
      case DdPackage.BINARY_EXPRESSION__DATE_TYPE:
        setDateType(DATE_TYPE_EDEFAULT);
        return;
      case DdPackage.BINARY_EXPRESSION__BOOL_TYPE:
        setBoolType(BOOL_TYPE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DdPackage.BINARY_EXPRESSION__LEFT:
        return left != null;
      case DdPackage.BINARY_EXPRESSION__OP:
        return op != OP_EDEFAULT;
      case DdPackage.BINARY_EXPRESSION__RIGHT:
        return right != null;
      case DdPackage.BINARY_EXPRESSION__NUM_TYPE:
        return numType != NUM_TYPE_EDEFAULT;
      case DdPackage.BINARY_EXPRESSION__STR_TYPE:
        return strType != STR_TYPE_EDEFAULT;
      case DdPackage.BINARY_EXPRESSION__DATE_TYPE:
        return dateType != DATE_TYPE_EDEFAULT;
      case DdPackage.BINARY_EXPRESSION__BOOL_TYPE:
        return boolType != BOOL_TYPE_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (op: ");
    result.append(op);
    result.append(", numType: ");
    result.append(numType);
    result.append(", strType: ");
    result.append(strType);
    result.append(", dateType: ");
    result.append(dateType);
    result.append(", boolType: ");
    result.append(boolType);
    result.append(')');
    return result.toString();
  }

} //BinaryExpressionImpl

/**
 * generated by Xtext 2.23.0
 */
package com.shark.lang.dd;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.eclipse.emf.common.util.Enumerator;

/**
 * <!-- begin-user-doc -->
 * A representation of the literals of the enumeration '<em><b>Binary Operator</b></em>',
 * and utility methods for working with them.
 * <!-- end-user-doc -->
 * @see com.shark.lang.dd.DdPackage#getBinaryOperator()
 * @model
 * @generated
 */
public enum BinaryOperator implements Enumerator
{
  /**
   * The '<em><b>Op Or</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #OP_OR_VALUE
   * @generated
   * @ordered
   */
  OP_OR(0, "opOr", "or"),

  /**
   * The '<em><b>Op And</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #OP_AND_VALUE
   * @generated
   * @ordered
   */
  OP_AND(1, "opAnd", "and"),

  /**
   * The '<em><b>Op Add</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #OP_ADD_VALUE
   * @generated
   * @ordered
   */
  OP_ADD(2, "opAdd", "+"),

  /**
   * The '<em><b>Op Min</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #OP_MIN_VALUE
   * @generated
   * @ordered
   */
  OP_MIN(3, "opMin", "-"),

  /**
   * The '<em><b>Op Mult</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #OP_MULT_VALUE
   * @generated
   * @ordered
   */
  OP_MULT(4, "opMult", "*"),

  /**
   * The '<em><b>Op Div</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #OP_DIV_VALUE
   * @generated
   * @ordered
   */
  OP_DIV(5, "opDiv", "/"),

  /**
   * The '<em><b>Op Mod</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #OP_MOD_VALUE
   * @generated
   * @ordered
   */
  OP_MOD(6, "opMod", "%"),

  /**
   * The '<em><b>Op Eq</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #OP_EQ_VALUE
   * @generated
   * @ordered
   */
  OP_EQ(7, "opEq", "=="),

  /**
   * The '<em><b>Op Gt</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #OP_GT_VALUE
   * @generated
   * @ordered
   */
  OP_GT(8, "opGt", ">"),

  /**
   * The '<em><b>Op Lt</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #OP_LT_VALUE
   * @generated
   * @ordered
   */
  OP_LT(9, "opLt", "<"),

  /**
   * The '<em><b>Op Lte</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #OP_LTE_VALUE
   * @generated
   * @ordered
   */
  OP_LTE(10, "opLte", "<="),

  /**
   * The '<em><b>Op Gte</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #OP_GTE_VALUE
   * @generated
   * @ordered
   */
  OP_GTE(11, "opGte", ">="),

  /**
   * The '<em><b>Op Pow</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #OP_POW_VALUE
   * @generated
   * @ordered
   */
  OP_POW(12, "opPow", "^"),

  /**
   * The '<em><b>Op Like</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #OP_LIKE_VALUE
   * @generated
   * @ordered
   */
  OP_LIKE(13, "opLike", "like"),

  /**
   * The '<em><b>Op Dif</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #OP_DIF_VALUE
   * @generated
   * @ordered
   */
  OP_DIF(14, "opDif", "!="),

  /**
   * The '<em><b>Op Cat</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #OP_CAT_VALUE
   * @generated
   * @ordered
   */
  OP_CAT(15, "opCat", "&"),

  /**
   * The '<em><b>Op In</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #OP_IN_VALUE
   * @generated
   * @ordered
   */
  OP_IN(16, "opIn", "in"),

  /**
   * The '<em><b>Op Stxt</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #OP_STXT_VALUE
   * @generated
   * @ordered
   */
  OP_STXT(17, "opStxt", "stxt"),

  /**
   * The '<em><b>Op Round</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #OP_ROUND_VALUE
   * @generated
   * @ordered
   */
  OP_ROUND(18, "opRound", "round");

  /**
   * The '<em><b>Op Or</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #OP_OR
   * @model name="opOr" literal="or"
   * @generated
   * @ordered
   */
  public static final int OP_OR_VALUE = 0;

  /**
   * The '<em><b>Op And</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #OP_AND
   * @model name="opAnd" literal="and"
   * @generated
   * @ordered
   */
  public static final int OP_AND_VALUE = 1;

  /**
   * The '<em><b>Op Add</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #OP_ADD
   * @model name="opAdd" literal="+"
   * @generated
   * @ordered
   */
  public static final int OP_ADD_VALUE = 2;

  /**
   * The '<em><b>Op Min</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #OP_MIN
   * @model name="opMin" literal="-"
   * @generated
   * @ordered
   */
  public static final int OP_MIN_VALUE = 3;

  /**
   * The '<em><b>Op Mult</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #OP_MULT
   * @model name="opMult" literal="*"
   * @generated
   * @ordered
   */
  public static final int OP_MULT_VALUE = 4;

  /**
   * The '<em><b>Op Div</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #OP_DIV
   * @model name="opDiv" literal="/"
   * @generated
   * @ordered
   */
  public static final int OP_DIV_VALUE = 5;

  /**
   * The '<em><b>Op Mod</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #OP_MOD
   * @model name="opMod" literal="%"
   * @generated
   * @ordered
   */
  public static final int OP_MOD_VALUE = 6;

  /**
   * The '<em><b>Op Eq</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #OP_EQ
   * @model name="opEq" literal="=="
   * @generated
   * @ordered
   */
  public static final int OP_EQ_VALUE = 7;

  /**
   * The '<em><b>Op Gt</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #OP_GT
   * @model name="opGt" literal="&gt;"
   * @generated
   * @ordered
   */
  public static final int OP_GT_VALUE = 8;

  /**
   * The '<em><b>Op Lt</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #OP_LT
   * @model name="opLt" literal="&lt;"
   * @generated
   * @ordered
   */
  public static final int OP_LT_VALUE = 9;

  /**
   * The '<em><b>Op Lte</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #OP_LTE
   * @model name="opLte" literal="&lt;="
   * @generated
   * @ordered
   */
  public static final int OP_LTE_VALUE = 10;

  /**
   * The '<em><b>Op Gte</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #OP_GTE
   * @model name="opGte" literal="&gt;="
   * @generated
   * @ordered
   */
  public static final int OP_GTE_VALUE = 11;

  /**
   * The '<em><b>Op Pow</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #OP_POW
   * @model name="opPow" literal="^"
   * @generated
   * @ordered
   */
  public static final int OP_POW_VALUE = 12;

  /**
   * The '<em><b>Op Like</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #OP_LIKE
   * @model name="opLike" literal="like"
   * @generated
   * @ordered
   */
  public static final int OP_LIKE_VALUE = 13;

  /**
   * The '<em><b>Op Dif</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #OP_DIF
   * @model name="opDif" literal="!="
   * @generated
   * @ordered
   */
  public static final int OP_DIF_VALUE = 14;

  /**
   * The '<em><b>Op Cat</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #OP_CAT
   * @model name="opCat" literal="&amp;"
   * @generated
   * @ordered
   */
  public static final int OP_CAT_VALUE = 15;

  /**
   * The '<em><b>Op In</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #OP_IN
   * @model name="opIn" literal="in"
   * @generated
   * @ordered
   */
  public static final int OP_IN_VALUE = 16;

  /**
   * The '<em><b>Op Stxt</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #OP_STXT
   * @model name="opStxt" literal="stxt"
   * @generated
   * @ordered
   */
  public static final int OP_STXT_VALUE = 17;

  /**
   * The '<em><b>Op Round</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #OP_ROUND
   * @model name="opRound" literal="round"
   * @generated
   * @ordered
   */
  public static final int OP_ROUND_VALUE = 18;

  /**
   * An array of all the '<em><b>Binary Operator</b></em>' enumerators.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static final BinaryOperator[] VALUES_ARRAY =
    new BinaryOperator[]
    {
      OP_OR,
      OP_AND,
      OP_ADD,
      OP_MIN,
      OP_MULT,
      OP_DIV,
      OP_MOD,
      OP_EQ,
      OP_GT,
      OP_LT,
      OP_LTE,
      OP_GTE,
      OP_POW,
      OP_LIKE,
      OP_DIF,
      OP_CAT,
      OP_IN,
      OP_STXT,
      OP_ROUND,
    };

  /**
   * A public read-only list of all the '<em><b>Binary Operator</b></em>' enumerators.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static final List<BinaryOperator> VALUES = Collections.unmodifiableList(Arrays.asList(VALUES_ARRAY));

  /**
   * Returns the '<em><b>Binary Operator</b></em>' literal with the specified literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param literal the literal.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static BinaryOperator get(String literal)
  {
    for (int i = 0; i < VALUES_ARRAY.length; ++i)
    {
      BinaryOperator result = VALUES_ARRAY[i];
      if (result.toString().equals(literal))
      {
        return result;
      }
    }
    return null;
  }

  /**
   * Returns the '<em><b>Binary Operator</b></em>' literal with the specified name.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param name the name.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static BinaryOperator getByName(String name)
  {
    for (int i = 0; i < VALUES_ARRAY.length; ++i)
    {
      BinaryOperator result = VALUES_ARRAY[i];
      if (result.getName().equals(name))
      {
        return result;
      }
    }
    return null;
  }

  /**
   * Returns the '<em><b>Binary Operator</b></em>' literal with the specified integer value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the integer value.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static BinaryOperator get(int value)
  {
    switch (value)
    {
      case OP_OR_VALUE: return OP_OR;
      case OP_AND_VALUE: return OP_AND;
      case OP_ADD_VALUE: return OP_ADD;
      case OP_MIN_VALUE: return OP_MIN;
      case OP_MULT_VALUE: return OP_MULT;
      case OP_DIV_VALUE: return OP_DIV;
      case OP_MOD_VALUE: return OP_MOD;
      case OP_EQ_VALUE: return OP_EQ;
      case OP_GT_VALUE: return OP_GT;
      case OP_LT_VALUE: return OP_LT;
      case OP_LTE_VALUE: return OP_LTE;
      case OP_GTE_VALUE: return OP_GTE;
      case OP_POW_VALUE: return OP_POW;
      case OP_LIKE_VALUE: return OP_LIKE;
      case OP_DIF_VALUE: return OP_DIF;
      case OP_CAT_VALUE: return OP_CAT;
      case OP_IN_VALUE: return OP_IN;
      case OP_STXT_VALUE: return OP_STXT;
      case OP_ROUND_VALUE: return OP_ROUND;
    }
    return null;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final int value;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final String name;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final String literal;

  /**
   * Only this class can construct instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private BinaryOperator(int value, String name, String literal)
  {
    this.value = value;
    this.name = name;
    this.literal = literal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getValue()
  {
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getLiteral()
  {
    return literal;
  }

  /**
   * Returns the literal value of the enumerator, which is its string representation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    return literal;
  }
  
} //BinaryOperator
